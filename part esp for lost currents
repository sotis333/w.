
debugX = true

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local highlightColor = Color3.fromRGB(255, 215, 0) -- Gold color
local scrapsColor = Color3.fromRGB(128, 128, 128) -- Scrap color (gray)
local helmetColor = Color3.fromRGB(0, 170, 255) -- Helmet color (blue)
local mapColor = Color3.fromRGB(0, 255, 127) -- Map color (green)
local highlightTransparency = 0.5

local Window = Rayfield:CreateWindow({
   Name = "Sotis Hub",
   Icon = 0,
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sotis",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "ESP Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("ESP", 4483362458)
local Section = Tab:CreateSection("Highlight Parts")

local function highlightParts(partName, color, label)
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name:lower() == partName:lower() then
            part.Color = color
            part.Material = Enum.Material.Neon
            part.Transparency = highlightTransparency

            if not part:FindFirstChild("ESPGui") then
                local esp = Instance.new("BillboardGui")
                esp.Name = "SotisESP"
                esp.Adornee = part
                esp.Size = UDim2.new(0, 100, 0, 40)
                esp.AlwaysOnTop = true
                esp.LightInfluence = 0
                esp.StudsOffset = Vector3.new(0, part.Size.Y/2 + 0.5, 0)
                esp.Parent = part

                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(1, 0, 1, 0)
                frame.BackgroundTransparency = 0.3
                frame.BackgroundColor3 = color
                frame.BorderSizePixel = 0
                frame.Parent = esp

                local text = Instance.new("TextLabel")
                text.Size = UDim2.new(1, 0, 1, 0)
                text.BackgroundTransparency = 1
                text.Text = label
                text.TextColor3 = Color3.new(1, 1, 1)
                text.TextStrokeTransparency = 0.5
                text.TextScaled = true
                text.Font = Enum.Font.GothamBold
                text.Parent = esp
            end
        end
    end
end


local espStates = {
    gold = false,
    scrap = false,
    helmet = false,
}

local function setESP(partName, color, label, enabled)
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name:lower() == partName:lower() then
            if enabled then
                part.Color = color
                part.Material = Enum.Material.Neon
                part.Transparency = highlightTransparency
                if not part:FindFirstChild("ESPGui") then
                    local esp = Instance.new("BillboardGui")
                    esp.Name = "ESPGui"
                    esp.Adornee = part
                    esp.Size = UDim2.new(0, 100, 0, 40)
                    esp.AlwaysOnTop = true
                    esp.LightInfluence = 0
                    esp.StudsOffset = Vector3.new(0, part.Size.Y/2 + 0.5, 0)
                    esp.Parent = part

                    local frame = Instance.new("Frame")
                    frame.Size = UDim2.new(1, 0, 1, 0)
                    frame.BackgroundTransparency = 0.3
                    frame.BackgroundColor3 = color
                    frame.BorderSizePixel = 0
                    frame.Parent = esp

                    local text = Instance.new("TextLabel")
                    text.Size = UDim2.new(1, 0, 1, 0)
                    text.BackgroundTransparency = 1
                    text.Text = label
                    text.TextColor3 = Color3.new(1, 1, 1)
                    text.TextStrokeTransparency = 0.5
                    text.TextScaled = true
                    text.Font = Enum.Font.GothamBold
                    text.Parent = esp
                end
            else
                local gui = part:FindFirstChild("ESPGui")
                if gui then gui:Destroy() end
                -- Optionally reset color/material/transparency here if needed
            end
        end
    end
end

Tab:CreateToggle({
    Name = "Gold ESP",
    CurrentValue = false,
    Callback = function(state)
        espStates.gold = state
        setESP("gold", highlightColor, "GOLD", state)
    end,
})

Tab:CreateToggle({
    Name = "Scrap ESP",
    CurrentValue = false,
    Callback = function(state)
        espStates.scrap = state
        setESP("scrap", scrapsColor, "SCRAP", state)
    end,
})

Tab:CreateToggle({
    Name = "Helmet ESP",
    CurrentValue = false,
    Callback = function(state)
        espStates.helmet = state
        setESP("helmet", helmetColor, "HELMET", state)
    end,
})

Tab:CreateButton({
   Name = "Highlight Map",
   Callback = function()
      highlightParts("map", mapColor, "MAP")
   end,
})


-- Player tab and features
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = nil
local Humanoid = nil
local walkSpeedConnection = nil


local noclipEnabled = false
local noclipConnection = nil
local flyEnabled = false
local flySpeed = 50
local walkSpeed = 16

local function getCharacter()
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    Humanoid = Character:FindFirstChildOfClass("Humanoid")
end

getCharacter()
LocalPlayer.CharacterAdded:Connect(getCharacter)


local function setWalkSpeed(speed)
    if Humanoid then
        Humanoid.WalkSpeed = speed
    end
end


-- Prevent walkspeed from resetting
local function monitorWalkSpeed()
    if Humanoid then
        if walkSpeedConnection then
            walkSpeedConnection:Disconnect()
        end
        walkSpeedConnection = Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            if Humanoid.WalkSpeed ~= walkSpeed then
                Humanoid.WalkSpeed = walkSpeed
            end
        end)
    end
end

local function getCharacter()
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    Humanoid = Character:FindFirstChildOfClass("Humanoid")
    setWalkSpeed(walkSpeed)
    monitorWalkSpeed()
    if Humanoid then
        Humanoid:GetPropertyChangedSignal("Parent"):Connect(function()
            if not Humanoid.Parent then
                if walkSpeedConnection then walkSpeedConnection:Disconnect() end
            end
        end)
    end
end


-- Fly logic with directional control
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local flyConnection = nil
local flyBody = nil
local flyDirection = Vector3.new()

local function getRoot()
    return Character and (Character.PrimaryPart or Character:FindFirstChild("HumanoidRootPart"))
end

local function updateFlyBody()
    if flyBody and getRoot() then
        local cam = workspace.CurrentCamera
        local moveDir = Vector3.new()
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDir = moveDir + cam.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDir = moveDir - cam.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDir = moveDir - cam.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDir = moveDir + cam.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDir = moveDir + cam.CFrame.UpVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDir = moveDir - cam.CFrame.UpVector
        end
        if moveDir.Magnitude > 0 then
            moveDir = moveDir.Unit
        end
        flyBody.Velocity = moveDir * flySpeed
    end
end

local function startFly()
    if not Character or not Humanoid then return end
    if flyBody then return end
    local root = getRoot()
    if not root then return end
    flyBody = Instance.new("BodyVelocity")
    flyBody.Name = "SotisFly"
    flyBody.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    flyBody.Velocity = Vector3.new()
    flyBody.Parent = root
    flyConnection = RunService.RenderStepped:Connect(updateFlyBody)
end

local function stopFly()
    if flyConnection then flyConnection:Disconnect() flyConnection = nil end
    if flyBody then flyBody:Destroy() flyBody = nil end
end

local function updateFlySpeed(speed)
    flySpeed = speed
end


local function setNoclip(state)
    noclipEnabled = state
    if noclipEnabled then
        if noclipConnection then noclipConnection:Disconnect() end
        noclipConnection = RunService.Stepped:Connect(function()
            if Character then
                for _, part in ipairs(Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConnection then noclipConnection:Disconnect() noclipConnection = nil end
        if Character then
            for _, part in ipairs(Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

local PlayerTab = Window:CreateTab("Player", 4483362458)
local PlayerSection = PlayerTab:CreateSection("Player Controls")


PlayerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(state)
        setNoclip(state)
    end,
})

PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(state)
        flyEnabled = state
        if flyEnabled then
            startFly()
        else
            stopFly()
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "Fly Speed",
    Range = {1, 100},
    Increment = 1,
    CurrentValue = flySpeed,
    Callback = function(value)
        updateFlySpeed(value)
    end,
})

PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {1, 300},
    Increment = 1,
    CurrentValue = walkSpeed,
    Callback = function(value)
        walkSpeed = value
        setWalkSpeed(walkSpeed)
        monitorWalkSpeed()
    end,
})

Rayfield:LoadConfiguration()
